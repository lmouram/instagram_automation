# pyproject.toml
#
# Arquivo de configuração de projeto gerenciado com `uv`.

[project]
name = "instagram-automation"
version = "0.1.0"
description = "Uma aplicação para automatizar a criação, aprovação e publicação de conteúdo no Instagram usando IA."
authors = [{ name = "Seu Nome", email = "seu.email@example.com" }]
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
keywords = ["python", "instagram", "automation", "llm", "hexagonal-architecture"]
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

# Dependências de produção
dependencies = [
    "streamlit>=1.35.0",
    "supabase>=2.4.2",
    "python-dotenv>=1.0.1",
    "google-genai>=1.32.0", 
    "requests>=2.31.0",
    "colorlog>=6.8.2",
    "tenacity>=8.2.3",
    "ratelimit>=2.2.1",
]

[build-system]
# O uv pode usar backends de build, mas para uma aplicação, isso pode não ser necessário.
# Se fôssemos criar um pacote instalável, o uv init criaria isso para nós.
# Por enquanto, podemos omitir ou usar o padrão.
requires = ["hatchling"]
build-backend = "hatchling.build"


[dependency-groups]
# Dependências de desenvolvimento, instaladas com `uv pip sync --with dev`
# ou por padrão se configurado.
dev = [
    "pytest>=8.2.1",
    "black>=24.4.2",
    "ruff>=0.4.4",
    "toml>=0.10.2",
    "pytest-mock>=3.12.0",
    "pytest-env>=1.1.3",
    "pytest-asyncio>=0.23.6",
    "pytest-dotenv>=0.5.2",
]

# --- Ferramentas de Qualidade de Código (o uv respeita estas seções) ---
[tool.black]
line-length = 88
target-version = ['py310']

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = ["E", "W", "F", "I", "C"]

[tool.ruff.lint.isort]
known-first-party = ["src"]

# --- Configuração do Sistema de Build (Hatch) ---
# Esta seção informa ao `hatchling` onde encontrar o código-fonte do nosso pacote.
# É essencial para que comandos como `uv run` ou `uv pip install -e .` funcionem.
[tool.hatch.build.targets.wheel]
# Mapeia o diretório 'src' como a raiz do nosso pacote.
packages = ["src"]
